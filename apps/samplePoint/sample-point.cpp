
/* Copyright (c) 2016, EPFL/Blue Brain Project
 *                     Jafet.VillafrancaDiaz@epfl.ch
 *
 * This file is part of Fivox <https://github.com/BlueBrain/Fivox>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of Eyescale Software GmbH nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "../commandLineApplication.h"

#include <fivox/fivox.h>
#include <fstream>

class SamplePoint : public CommandLineApplication
{
public:
    SamplePoint()
        : CommandLineApplication( "Sample a 3D point to obtain its time series "
                                  "over the specified frame range" )
        , _outputFile( "point_values.txt" )
    {
        _options.add_options()
//! [SamplePointParameters] @anchor SamplePoint
            ( "point,p", po::value< fivox::Vector3f >(),
              "'x y z' coordinates of the point to be sampled (3 float "
              "numbers, space separated)")
            ( "output,o", po::value< std::string >(),
              "Name of the output file, containing one line per value, in the "
              "format \"timestamp value\". Also a header with information "
              "about the generation: volume URI, dt, frame range and the point "
              "that was sampled" );
//! [SamplePointParameters]
    }

    bool parse( int argc, char* argv[] ) final
    {
        if( !CommandLineApplication::parse( argc, argv ))
            return false;

        if( _vm.count( "output" ))
            _outputFile = _vm["output"].as< std::string >();

        if( _vm.count( "point" ))
            _point = _vm["point"].as< fivox::Vector3f >();

        return true;
    }

    bool write() const
    {
        const ::fivox::URIHandler params( getURI( ));
        if( params.getDt() > -1.f )
        {
            LBWARN << "Specifying a custom dt in the volume URI is not "
                   << "supported by the sample-point tool" << std::endl;
            return EXIT_FAILURE;
        }

        auto functor = params.newFunctor< fivox::FloatVolume >();
        auto eventSource = params.newEventSource();
        functor->setEventSource( eventSource );

        const float dt = eventSource->getDt();
        const fivox::Vector2ui frameRange( getFrameRange( dt ));

        typename fivox::FloatVolume::PointType itkPoint;
        itkPoint[0] = _point[0];
        itkPoint[1] = _point[1];
        itkPoint[2] = _point[2];

        std::ofstream file( _outputFile );
        file << "# File generated by the sample-point tool:\n"
             << "# - Format: timestamp value\n"
             << "# - Fivox URI: " << getURI() << "\n"
             << "# - dt: " << dt << "\n"
             << "# - Frame range: " << frameRange << "\n"
             << "# - Point sampled: " << _point << "\n"
             << std::endl;

        for( uint32_t i = frameRange.x(); i < frameRange.y(); ++i )
        {
            eventSource->setFrame( i );
            eventSource->load( 0, eventSource->getNumChunks( ));
            const float value = (*functor)( itkPoint,
                                            fivox::FloatVolume::SpacingType( ));
            file << i * dt << " " << value << "\n";
        }

        file.close();

        LBINFO << "Values written as " << _outputFile << std::endl;
        return EXIT_SUCCESS;
    }

private:
    std::string _outputFile;
    fivox::Vector3f _point;
};

int main( int argc, char* argv[] )
{
    SamplePoint app;
    if( !app.parse( argc, argv ))
        return EXIT_SUCCESS;

    return app.write();
}
